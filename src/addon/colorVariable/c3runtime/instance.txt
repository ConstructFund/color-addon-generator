"use strict";
{
  const NB_COLORS = %%NB_COLORS%%;
  const BEHAVIOR_ID = `Mitsuhashish_${NB_COLORS}ColorVariable`;
  const C3 = self.C3;

  C3.Behaviors[BEHAVIOR_ID].Instance = class ColorVariableInstance extends (
    C3.SDKBehaviorInstanceBase
  ) {
    constructor(behInst, properties) {
      super(behInst);

      this.strToId = {};
      if (properties) {
        this.p_col = properties;
      }

      this.clamp = (num, min, max) =>
        num <= min ? min : num >= max ? max : num; // >>> Get
      this.float2rgb = (r, g, b) => [
        Math.floor(r * 255.99),
        Math.floor(g * 255.99),
        Math.floor(b * 255.99),
      ]; // >>> asHEX
      this.rgb2hex = (arr) =>
        "#" +
        ((1 << 24) + (arr[0] << 16) + (arr[1] << 8) + arr[2])
          .toString(16)
          .slice(1); // >>> asHEX
      this.hex2float = (hex) => {
        //SetHEX
        var res = hex.match(/[a-f0-9]{2}/gi);
        return res && res.length === 3
          ? res.map(function (v) {
              return parseInt(v, 16) / 255;
            })
          : null;
      };
      this.float2string = (a, b, c, d) => {
        // >>> Get
        a = this.clamp(Math.floor(1024 * a), -8192, 8191);
        b = this.clamp(Math.floor(1024 * b), -8192, 8191);
        c = this.clamp(Math.floor(1024 * c), -8192, 8191);
        d = this.clamp(Math.floor(1023 * d), 0, 1023);
        0 > a && (a += 16384);
        0 > b && (b += 16384);
        0 > c && (c += 16384);
        return -(16384 * (16384 * a) * 1024 + 16384 * b * 1024 + c * 1024 + d);
      };
      this.string2r = (g) => {
        // >>> Set
        if (0 <= g) return (g & 255) / 255;
        g = Math.floor(-g / 274877906944);
        8191 < g && (g -= 16384);
        return g / 1024;
      };
      this.string2g = (g) => {
        // >>> Set
        if (0 <= g) return ((g & 65280) >> 8) / 255;
        g = Math.floor((-g % 274877906944) / 16777216);
        8191 < g && (g -= 16384);
        return g / 1024;
      };
      this.string2b = (g) => {
        // >>> Set
        if (0 <= g) return ((g & 16711680) >> 16) / 255;
        g = Math.floor((-g % 16777216) / 1024);
        8191 < g && (g -= 16384);
        return g / 1024;
      };
      this.string2rgb = (string) => [
        this.string2r(string),
        this.string2g(string),
        this.string2b(string),
      ]; // >>> Set
    }

    parseId(id) {
      if (typeof id === "number") return id;
      let mappedId = this.strToId[id];
      if (mappedId === null || mappedId === undefined) return -1;
      return mappedId;
    }

    Release() {
      super.Release();
    }

    SaveToJson() {
      return {
        // data to be saved for savegames
      };
    }

    LoadFromJson(o) {
      // load state for savegames
    }

    /*
		Tick()
		{
			const dt = this._runtime.GetDt(this._inst);
			const wi = this._inst.GetWorldInfo();
			
			// ... code to run every tick for this behavior ...
		}
		*/

    GetDebuggerProperties() {
      return [
        {
          title: "ColorVariable",
          properties: [
            //{name: ".current-animation",	value: this._currentAnimation.GetName(),	onedit: v => this.CallAction(Acts.SetAnim, v, 0) },
          ],
        },
      ];
    }
  };
}
